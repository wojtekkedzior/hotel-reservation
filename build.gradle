/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = 'http://repo.maven.apache.org/maven2'
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-devtools:2.1.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter:2.1.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-security:2.1.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web:2.1.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:2.1.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-tomcat:2.1.7.RELEASE'
    compile 'mysql:mysql-connector-java:8.0.17'
    compile 'org.projectlombok:lombok:1.18.8'
    compile 'org.hibernate:hibernate-envers:5.3.10.Final'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf:2.1.7.RELEASE'
    compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE'
    compile 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.3.0'
    compile 'org.webjars:jquery:3.4.1'
    compile 'org.webjars:bootstrap:4.3.1'
    compile 'javax.xml.bind:jaxb-api:2.3.0-b170201.1204'
    compile 'javax.activation:activation:1.1'
    compile 'org.glassfish.jaxb:jaxb-runtime:2.3.0-b170127.1453'
    testCompile 'org.springframework.security:spring-security-test:5.1.6.RELEASE'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:3.1.9'
    testCompile 'org.springframework.boot:spring-boot-starter-test:2.1.7.RELEASE'
    testCompile 'com.h2database:h2:1.4.199'
//    providedCompile 'org.apache.tomcat.embed:tomcat-embed-jasper:9.0.22'
}

group = 'hotel.reservation'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '9'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
}


import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED
//                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces false

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED
//                    TestLogEvent.STANDARD_ERROR,
//                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}